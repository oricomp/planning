#+title: OriComp Planning
#+auto_tangle: nil

* TODO [0/9] Programming Language
:PROPERTIES:
:ID:       446aeb7e-c110-47b4-afb7-efe1c013b8a5
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

A completely custom programming language for use in *OriComp*. Should be similar/inspired
by C, C++, Rust, Zig, C3, Go, etc.

A low level system programming language.

Arbitrary compile time code execution.

Only tool necessary for building project is compiler (can use built in library to build
entire project at compile time).

Python like markers (only for functions?).

Named TIO (Two in One) (compile time and run time) (compile time dynamically typed?)

Compile time expansion of lists/vectors as arguments to function?

Ability to add "optimizations"/"inferences" similar to how
~String str = "Hello World";~ would have the string literal (a ~u8~ array) upgraded
to type ~String~. This should be added to the language itself (compile time) so that
users can add such things however they want.

Able to change parts of the language using the language itself. Not really sure
how to do this, but like the idea. Maybe just the markers will do it?

Special variable ~_~ that can be redefined/implicitly declared and just symbolizes
to compiler that value is ignored. (padding in structs (if necessary)).

Function chaining (~obj.func1().func2().func3()~) is useful, but often confusing if
the functions modify the object in place instead of producing a new object. Can
potentially fix this confusion by allowing functions to tell compiler they modify
the object in place? This prevents
#+begin_src
a = Obj()
b = a.f().g().h()
a == b // true
#+end_src
This is really only needed for member functions (not all functions).

Lambda functions via nameless functions. Normal functions are declared via ~func~ keyword. Lambda
(or nameless) just have no name.
#+begin_src
func void main() {} // normal declaration of function that takes no args and returns nothing

func void () {} // nameless declaration of function that takes no args and returns nothing
#+end_src

Imports are file/folder based (can add include paths). Example, ~import std::io~, then used as
~io::print()~. Can also do ~import std::io::print~, at which point ~print()~ would work, but
nothing else from ~std::io~ is imported. Or can import everything, ~import std::io::{*}~.
Importing multiple things from module is ~import std::io::{print, println}~.

Way to specify requirements/guarantees of input/output for functions (will be checked at
compile time). Not as advanced as [[https://dafny.org/][dafny]] but capable of doing some things.

Allow ~_~ in numeric literals of all forms (decimal, binary, hex, octal).

Types:
 - ~i8~, ~i16~, ..., ~i128~ -- signed ints
 - ~u8~, ~u16~, ..., ~u128~ -- unsigned ints
 - ~f16~, ~f32~, ... -- floating point numbers
 - ~xY_Z~ -- fixed point where ~Y~ is number of bits before decimal and ~Z~ is number of bits
   after decimal
 - No characters (they are just ~u8~)
 - Fat pointers with size and location (cannot cast from smaller size to bigger size)
 - ~const~ can be initialized after declaration (but only once) (e.g. ~const u8 x; x = 5;~)

** TODO Look Into Hare
:PROPERTIES:
:ID:       ca6aa35a-90d8-4c89-9069-f75ee4af42a8
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-22 Thu 18:33]
:END:

[[https://harelang.org/][Hare Programming Language]]

** TODO Learn Rust
:PROPERTIES:
:ID:       7b2200fe-0114-49ca-b748-f1e64a823b56
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:21]
:END:

[[https://doc.rust-lang.org/book/][Book]]
[[https://github.com/rust-lang/rustlings/][Rustlings Course]]
[[https://doc.rust-lang.org/rust-by-example/][Examples]]

** TODO Learn Zig
:PROPERTIES:
:ID:       408f98fd-4e64-4fc5-8d42-8990738e9a5b
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:21]
:END:

[[https://ziglang.org/learn/][Documentation]]

** TODO Compiler for Language
:PROPERTIES:
:ID:       b25b729d-255f-438c-acad-a276905a5a94
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-22 Thu 15:07]
:END:

Language should be compiled. Probably easiest to write compiler in Python first,
then transfer to new language. Support LLVM (or alternative?) backend, but also
own custom backend (to be implemented in future).

** TODO Treesitter for Language
:PROPERTIES:
:ID:       77b683f4-450c-4b17-bf63-c571c088e5ed
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Or some other type of syntax highlighter (working with Emacs)

** TODO Debugger for Language
:PROPERTIES:
:ID:       33ac56b3-7ca3-48eb-a74f-a207b1b06085
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Including DAP

** TODO LSP for Language
:PROPERTIES:
:ID:       5d188211-c74b-40af-b3b6-1e6eb04deeaa
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Works with Emacs.
[[https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/][Specs]]

** TODO Documentation Generator For Language
:PROPERTIES:
:ID:       59483458-64e6-4538-920c-87b243ead4fb
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Similar to [[https://www.doxygen.nl/][Doxygen]]

** TODO Formatter for Language
:PROPERTIES:
:ID:       d3da47c3-5d9d-45ed-96f4-abd5b0710610
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-30 Fri 10:33]
:END:

Similar to clang-format (also using yaml for configuration).

* TODO [0/6] Vaudeo
:PROPERTIES:
:ID:       77cbab3b-6e85-46d7-9427-f89722dc2db1
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Complete "firmware" for rev A of Vaudeo board.

** PROG Get Reacquainted with Verilog
:PROPERTIES:
:ID:       1ae210ce-686e-43a9-abc2-d6826771cc01
:END:
:LOGBOOK:
- State "PROG"       from "NEXT"       [2024-08-28 Wed 22:46]
- State "NEXT"       from "TODO"       [2024-08-27 Tue 18:30]
- State "TODO"       from              [2024-08-27 Tue 18:30]
:END:

Use [[https://hdlbits.01xz.net/wiki/Main_Page][hdlbits]] and [[https://chipdev.io/question-list][chipdev]] for this

** NEXT Basic VGA signals generated
:PROPERTIES:
:ID:       4d158a2e-719e-4f29-a9f0-795d9de4fe7f
:END:
:LOGBOOK:
- State "NEXT"       from "TODO"       [2024-08-28 Wed 22:45]
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Vertical sync and Horizontal sync

** NEXT Working Simulation/Interface For Testing
:PROPERTIES:
:ID:       36248ea9-aff9-41ab-8f0b-40ea38b093cc
:END:
:LOGBOOK:
- State "NEXT"       from "TODO"       [2024-08-28 Wed 22:45]
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Create a simulation or interface between the testing of the verilog firmware and
a screen that mimics a screen.

https://www.cocotb.org/

** TODO Basic Test patterns
:PROPERTIES:
:ID:       845a9fa1-a32e-4056-8fb6-5dd02d97b1a0
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Different colored boxes, lines, etc.

** TODO Character generation
:PROPERTIES:
:ID:       3a038e6f-5727-41ba-ab67-f596c6df7b49
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

256? 512? character ROM

** TODO [0/2] Access External DRAM
:PROPERTIES:
:ID:       7129073e-0fe1-4e9a-bbd2-5d3700da00d8
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Also build into simulation

*** TODO Access External DRAM on Hardware
:PROPERTIES:
:ID:       fa365ecc-6b7d-4668-a040-554e89ce962f
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

[[https://www.digikey.com/en/products/detail/issi-integrated-silicon-solution-inc/IS42S16400J-7TLI/2708624][DigiKey Purchase]]

*** TODO Simulation Mimics DRAM Usage
:PROPERTIES:
:ID:       ef9b4a04-ced4-4592-8a8d-fb0dd62fb015
:END:
:LOGBOOK:
- State "TODO"       from              [2024-08-20 Tue 18:20]
:END:

Should also throw errors when there is not proper timing, etc.
